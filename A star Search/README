					            15-PUZZLE: A* Search Approach 

In this program, the 15-puzzle is solved using a* search approach. Here the input is given in the form of sequence of numbered tiles.
This program gives information about the moves to be taken to reach the goal, number of nodes expanded before reaching the goal, overall time taken, and Memory used
Here each tile is numbered in a series and the empty slot is considered as 0. So, the input of the program will be a sequence of 16 numbers
Here we are going to perform astar search using two heuristics:
1. Number of Misplaced tiles
2. Manhattan Distance
Instructions to run the code:
•	Run the file 15puzzle_astar.py
•	It will ask for the input of current state of 15-puzzle "Initial Configuration". Please enter the initial state of the puzzle in a sequence of numbers as per the number on the tile by separating with space
•	Click Enter

Program execution and algorithm 
•	The input is converted to list 
•	Class Board defines the state of the problem
•	Class Node defines the node object which contains state, parent, position and action
•	Two separate processes are called using multiprocessing concept. One for misplaced items and the other for manhattan distance
	1.	Misplaced Items:
		a.	A new object of Node is created using the input state and pushed into the frontier
		b.	We check the minimum value of (number of misplaced items + level of the node) for all the nodes inside the frontier and save that node in a temporary variable.
		c.	Now, this node is checked whether it is equal to the goal state.
		d.	If it is equal, then it is returned to the main function
		e.	Otherwise, pop out the current minimum node from the frontier and find the children using L, R, U, D operations, which are pushed into the frontier.
		f.	Repeat the process till you find the goal.
	2.	Manhattan Distance:
		a.	A new object of Node is created using the input state and pushed into the frontier
		b.	We check the minimum value of (Manhattan Distance + level of the node) for all the nodes inside the frontier and save that node in a temporary variable.
		c.	Now, this node is checked whether it is equal to the goal state.
		d.	If it is equal, then it is returned to the main function
		e.	Otherwise, pop out the current minimum node from the frontier and find the children using L, R, U, D operations, which are pushed into the frontier.
		f.	Repeat the process till you find the goal.
•	Print the results



Output is displayed as follows:
The following values are displaced for both approaches of astar

•	Moves: 
•	Number of Nodes expanded:
•	Memory used:
•	Time Taken:



Note:   this code is runnable in python3 and make sure you have the package psutil.
	We have added a timeout for the states that cannot be solved
